#ifndef _UNI_GLOBALS_H
#define _UNI_GLOBALS_H
//----------------------------------------------------------------------------------------------------------------
#define NO_TEMPERATURE_DATA -128 // нет данных с датчика температуры или влажности
#define NO_LUMINOSITY_DATA - 1 // нет данных с датчика освещённости
//----------------------------------------------------------------------------------------------------------------
#define PH_MV_PER_7_PH 2000 // кол-во милливольт, при  которых датчик показывает 7 pH
// раскомментировать следующую строчку, если датчик pH имеет реверсивное изменение вольтажа при изменении pH,
// т.е. при увеличении pH ( > 7) значение вольтажа уменьшается. По умолчанию считается, что при увеличении pH
// значение вольтажа увеличивается.
// #define PH_REVERSIVE_MEASURE 
//----------------------------------------------------------------------------------------------------------------
#define UNUSED(expr) do { (void)(expr); } while (0)
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
typedef struct
{
  byte Type; // тип датчика
  byte Pin; // пин, на котором висит датчик
  byte Pin2; // второй пин (для строба SHT10)
  
} SensorSettings; // настройки датчиков, подключённых к модулю
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
typedef enum
{
  mstNone, // ничего нету
  mstDS18B20, // температурный DS18B20
  mstBH1750, // цифровой освещённости BH1750
  mstSi7021, // цифровой влажности Si7021
  mstChinaSoilMoistureMeter, // китайский датчик влажности почвы
  mstDHT11, // датчик семейства DHT11
  mstDHT22, // датчик семейства DHT2x
  mstPHMeter, // датчик PH
  mstFrequencySoilMoistureMeter, // частотный датчик влажности почвы
  mstSHT10, // датчик SHT10
  mstMAX44009, // датчик освещённости Max44009
  mstPinsMap, // карта состояния пинов, 32 пина
  
} ModuleSensorType; // тип датчика, подключенного к модулю
//----------------------------------------------------------------------------------------------------------------
typedef enum
{
  ptSensorsData = 1, // данные с датчиков
  ptNextionDisplay = 2, // дисплей Nextion, подключённый по шине 1-Wire
  ptExecuteModule = 3 // исполнительный модуль 
  
} PacketTypes;
//----------------------------------------------------------------------------------------------------------------
//Структура передаваемая мастеру и обратно
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
struct sensor
{
    byte index;
    byte type;
    byte data[4];
    
};
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
typedef struct
{
    byte packet_type;
    byte packet_subtype;
    byte config;
    byte controller_id;
    byte rf_id;
    byte battery_status;
    byte calibration_factor1;
    byte calibration_factor2;
    byte query_interval_min;
    byte query_interval_sec;
    byte reserved;

    sensor sensor1,sensor2,sensor3;

    byte crc8;
} t_scratchpad;
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
typedef enum
{
  uniNone = 0, // ничего нет
  uniTemp = 1, // только температура, значащие - два байта
  uniHumidity = 2, // влажность (первые два байта), температура (вторые два байта) 
  uniLuminosity = 3, // освещённость, 4 байта
  uniSoilMoisture = 4, // влажность почвы (два байта)
  uniPH = 5, // показания pH (два байта)
  uniPinsMap = 6, // карта состояния пинов (4 байта)
  
} UniSensorType; // тип датчика
//----------------------------------------------------------------------------------------------------------------
typedef struct
{
  byte samplesDone;
  bool inMeasure;
  unsigned long samplesTimer;
  unsigned long data;
  
} PHMeasure;
//----------------------------------------------------------------------------------------------------------------
#define PH_NUM_SAMPLES 10 // кол-во замеров
#define PH_SAMPLES_INTERVAL 20 // интервал между замерами
//----------------------------------------------------------------------------------------------------------------
#define MEASURE_MIN_TIME 1000 // через сколько минимум можно читать с датчиков после запуска конвертации
//----------------------------------------------------------------------------------------------------------------
enum {RS485FromMaster = 1, RS485FromSlave = 2};
enum 
{
  RS485ControllerStatePacket = 1, 
  RS485SensorDataPacket = 2, 
  RS485WindowsPositionPacket = 3,
  RS485RequestCommandsPacket = 4,
  RS485CommandsToExecuteReceipt = 5,
  RS485SensorDataForRemoteDisplay = 6,
  RS485SettingsForRemoteDisplay = 7,
  RS485WindRainData = 8, // запрос данных по дождю, скорости, направлению ветра
  RS485SunControllerData = 9, // пакет с данными контроллера солнечной установки
};
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
typedef struct
{
  uint32_t WindowsState; // состояние каналов окон, 4 байта = 32 бита = 16 окон)
  uint16_t WaterChannelsState; // состояние каналов полива, 2 байта, (16 каналов)
  byte LightChannelsState; // состояние каналов досветки, 1 байт (8 каналов)
  byte PinsState[16]; // состояние пинов, 16 байт, 128 пинов
  
} ControllerState; // состояние контроллера
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
typedef struct
{
  byte header1;
  byte header2;

  byte direction; // направление: 1 - от меги, 2 - от слейва
  byte type; // тип: 1 - пакет исполнительного модуля, 2 - пакет модуля с датчиками

  byte data[sizeof(ControllerState)]; // N байт данных, для исполнительного модуля в этих данных содержится состояние контроллера
  // для модуля с датчиками: первый байт - тип датчика, 2 байт - его индекс в системе. В обратку модуль с датчиками должен заполнить показания (4 байта следом за индексом 
  // датчика в системе и отправить пакет назад, выставив direction и type.

  byte tail1;
  byte tail2;
  byte crc8;
  
} RS485Packet; // пакет, гоняющийся по RS-485 туда/сюда (30 байт)
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
#pragma pack(push,1)
typedef struct
{
  int8_t Humidity;
  uint8_t HumidityDecimal;
  
  int8_t Temperature;
  uint8_t TemperatureDecimal;
  
} HumidityAnswer;
#pragma pack(pop)
//----------------------------------------------------------------------------------------------------------------
#endif
